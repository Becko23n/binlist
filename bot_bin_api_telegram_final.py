
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

BOT_TOKEN = "8198164270:AAGpRymPmXUxPpeRbUYZC5maVSfJJmcLk-Q"
RAPIDAPI_KEY = "a08b0e3a2cmshec1e7d909ca702ep15a71bjsnb53e7970f357"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã ¬°Hola! Env√≠ame un n√∫mero BIN (6 d√≠gitos) y te dir√© lo que s√© üîç")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    texto = update.message.text.strip()
    if not texto.isdigit() or len(texto) < 6:
        await update.message.reply_text("‚ùó Env√≠ame un BIN v√°lido (6 d√≠gitos)")
        return

    bin_code = texto[:6]

    url = "https://bin-ip-checker.p.rapidapi.com/" + bin_code
    headers = {
        "X-RapidAPI-Key": RAPIDAPI_KEY,
        "X-RapidAPI-Host": "bin-ip-checker.p.rapidapi.com"
    }

    try:
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            data = response.json()

            if data.get("valid") and "vendor" in data:
                mensaje = (
                    f"üí≥ BIN: {bin_code}\n"
                    f"üè¶ Banco: {data.get('bank_name', 'N/D')}\n"
                    f"üåê Marca: {data.get('vendor', 'N/D')}\n"
                    f"üíº Tipo: {data.get('type', 'N/D')}\n"
                    f"üåç Pa√≠s: {data.get('country_name', 'N/D')}\n"
                    f"üîí Nivel: {data.get('level', 'N/D')}"
                )
            else:
                mensaje = "‚ùå No se encontr√≥ informaci√≥n para ese BIN."
        else:
            mensaje = f"‚ö†Ô∏è Error consultando la API (c√≥digo {response.status_code})"

    except Exception as e:
        mensaje = f"üö® Error de conexi√≥n con la API: {e}"

    await update.message.reply_text(mensaje)

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
